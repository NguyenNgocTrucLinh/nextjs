{"ast":null,"code":"var _jsxFileName = \"D:\\\\gitTest\\\\next-learn-demo\\\\E3-lazy-loading-components\\\\lib\\\\with-post.js\";\nimport React from 'react';\nimport MyLayout from '../components/MyLayout';\nimport marked from 'marked'; // import Highlight from 'react-highlight'\n\nimport dynamic from 'next/dynamic';\nconst Highlight = dynamic(() => import('react-highlight'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-highlight')],\n    modules: ['react-highlight']\n  }\n});\nmarked.setOptions({\n  gfm: true,\n  tables: true,\n  breaks: true\n});\nexport default function WithPost(options) {\n  return class PostPage extends React.Component {\n    renderMarkdown() {\n      // If a code snippet contains in the markdown content\n      // then use Highlight component\n      if (/~~~/.test(options.content)) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(Highlight, {\n          innerHTML: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, marked(options.content)));\n      } // If not, simply render the generated HTML from markdown\n\n\n      return React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: marked(options.content)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    }\n\n    render() {\n      return React.createElement(MyLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, options.title), this.renderMarkdown());\n    }\n\n  };\n} //","map":{"version":3,"sources":["D:\\gitTest\\next-learn-demo\\E3-lazy-loading-components\\lib\\with-post.js"],"names":["React","MyLayout","marked","dynamic","Highlight","setOptions","gfm","tables","breaks","WithPost","options","PostPage","Component","renderMarkdown","test","content","__html","render","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,MAAMC,SAAS,GAAGD,OAAO,OAAC,OAAO,iBAAP,CAAD;AAAA;AAAA,wCAAQ,iBAAR;AAAA,cAAQ,iBAAR;AAAA;AAAA,EAAzB;AACAD,MAAM,CAACG,UAAP,CAAkB;AAChBC,EAAAA,GAAG,EAAE,IADW;AAEhBC,EAAAA,MAAM,EAAE,IAFQ;AAGhBC,EAAAA,MAAM,EAAE;AAHQ,CAAlB;AAKA,eAAe,SAASC,QAAT,CAAmBC,OAAnB,EAA4B;AACzC,SAAO,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAC5CC,IAAAA,cAAc,GAAI;AAChB;AACA;AACA,UAAI,MAAMC,IAAN,CAAWJ,OAAO,CAACK,OAAnB,CAAJ,EAAiC;AAC/B,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD;AAAW,UAAA,SAAS,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGb,MAAM,CAACQ,OAAO,CAACK,OAAT,CADT,CADF,CADF;AAOD,OAXe,CAYhB;;;AACA,aACE;AACE,QAAA,uBAAuB,EAAE;AAACC,UAAAA,MAAM,EAAEd,MAAM,CAACQ,OAAO,CAACK,OAAT;AAAf,SAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAKD;;AAEDE,IAAAA,MAAM,GAAI;AACR,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKP,OAAO,CAACQ,KAAb,CADF,EAEI,KAAKL,cAAL,EAFJ,CADF;AAMD;;AA5B2C,GAA9C;AA8BD,C,CAED","sourcesContent":["import React from 'react'\r\nimport MyLayout from '../components/MyLayout'\r\nimport marked from 'marked'\r\n// import Highlight from 'react-highlight'\r\nimport dynamic from 'next/dynamic'\r\n\r\nconst Highlight = dynamic(import('react-highlight'))\r\nmarked.setOptions({\r\n  gfm: true,\r\n  tables: true,\r\n  breaks: true\r\n})\r\nexport default function WithPost (options) {\r\n  return class PostPage extends React.Component {\r\n    renderMarkdown () {\r\n      // If a code snippet contains in the markdown content\r\n      // then use Highlight component\r\n      if (/~~~/.test(options.content)) {\r\n        return (\r\n          <div>\r\n            <Highlight innerHTML>\r\n              {marked(options.content)}\r\n            </Highlight>\r\n          </div>\r\n        )\r\n      }\r\n      // If not, simply render the generated HTML from markdown\r\n      return (\r\n        <div\r\n          dangerouslySetInnerHTML={{__html: marked(options.content)}}\r\n        />\r\n      )\r\n    }\r\n\r\n    render () {\r\n      return (\r\n        <MyLayout>\r\n          <h1>{options.title}</h1>\r\n          { this.renderMarkdown() }\r\n        </MyLayout>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n//"]},"metadata":{},"sourceType":"module"}